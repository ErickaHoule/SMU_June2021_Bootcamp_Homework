Note* Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps.In [ ]:# Dependencies and Setupimport pandas as pdimport numpy as np?# File to Load (Remember to Change These)file_to_load = "resources/purchase_data.csv"?# Read Purchasing File and store into Pandas data framepurchase_data = pd.read_csv(file_to_load)In [ ]:purchase_data.head()In [ ]:purchase_data.describe()In [ ]:# Number of Purchaseslen(purchase_data)Player Count* Display the total number of playersIn [ ]:# Total number of players - counting only unique valuesunique_SN = purchase_data.SN.nunique()unique_SNPurchasing Analysis (Total)* Run basic calculations to obtain number of unique items, average price, etc.* Create a summary data frame to hold the results* Optional: give the displayed data cleaner formatting* Display the summary data frameIn [ ]:# Using .rename(columns={}) in order to rename columnsrenamed_df = purchase_data.rename(columns={"Purchase ID":"Purchase_ID", "Item ID":"Item_ID",'Item Name':'Item_Name' })renamed_df.head()In [ ]:# Number of unique itemsunique_Item_Name = renamed_df.Item_Name.nunique()unique_Item_NameIn [ ]:# Average priceavg_price = renamed_df["Price"].mean()round_avg = round(avg_price,2)print(f'${round_avg}')In [ ]:# Number of Purchasesnum_purchases = len(purchase_data)num_purchasesIn [ ]:# Total Revenuerevenue = purchase_data.Price.sum()print(f'${revenue}')In [ ]:# summary data framepurchasing_analysis_summ = pd.DataFrame([unique_Item_Name, round_avg, num_purchases, revenue]).Tpurchasing_analysis_summ.columns = ["Number of Unique Items", "Average Price", "Number of Purchases", "Total Revenue"]purchasing_analysis_summGender Demographics* Percentage and Count of Male Players* Percentage and Count of Female Players* Percentage and Count of Other / Non-DisclosedIn [ ]:# Removing duplicates playersplayers_unique = renamed_df.loc[:, ['SN', 'Age', 'Gender']].drop_duplicates().reset_index(drop=True)players_unique.head()In [ ]:# count_gender = renamed_df["Gender"].value_counts()count_gender = players_unique.groupby('Gender').size()count_genderIn [ ]:# Gender percentilepercent_gender = (players_unique.groupby('Gender').size()/players_unique['Gender'].count())*100percent_gender_round = round(percent_gender,2)percent_gender_round In [ ]:# Data frame with player counts and gender percentileplayer_summ = pd.DataFrame(players_unique.groupby("Gender").size(), columns=["Count"])player_summ["Percentage"] = percent_gender_roundplayer_summPurchasing Analysis (Gender)* Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. by gender* Create a summary data frame to hold the results* Optional: give the displayed data cleaner formatting* Display the summary data frameIn [ ]:# Purchase count by gendergender_purch_cnt = purchase_data.groupby("Gender").size()gender_purch_cntIn [ ]:# Purchase average price by gendergender_price_cnt = round((purchase_data.groupby("Gender").Price.mean()),2)gender_price_cntIn [ ]:# Total purchase by gendergender_price_sum = purchase_data.groupby("Gender").Price.sum()gender_price_sumIn [ ]:# Average total purchase per persongender_purchase_avg = round((gender_price_sum / count_gender),2)gender_purchase_avgIn [ ]:# Summary data framegender_purch_summ = pd.DataFrame([gender_purch_cnt, gender_price_cnt, gender_price_sum]).Tgender_purch_summ.columns = ["Total Purchases", "Average Purchases", "Sum Purchases"]gender_purch_summ['Purchases by Player Avg'] = gender_purchase_avg?gender_purch_summAge Demographics* Establish bins for ages* Categorize the existing players using the age bins. Hint: use pd.cut()* Calculate the numbers and percentages by age group* Create a summary data frame to hold the results* Optional: round the percentage column to two decimal points* Display Age Demographics TableIn [ ]:# Creating binsbins = [0, 14, 16, 18, 20, 22, 24, 26, 29, 34, 39, 1000]?# Create the names for the five binsgroup_names = ["<14", "15-16", "17-18", "19-20", "21-22", "23-24", "25-26", "27,29", "30-34","35-39", "40+"]In [ ]:# Categorizing players into age binsplayers_unique["AgeGroup"] = pd.cut(players_unique["Age"], bins, labels=group_names, include_lowest=True)players_uniqueIn [ ]:# Summary data frame by AgeGroup Binsplayer_summ2 = pd.DataFrame(players_unique.groupby("AgeGroup").size(), columns=["Count"])player_summ2["Percentage"] = round((player_summ2["Count"] / len(players_unique) * 100),2)player_summ2Purchasing Analysis (Age)* Bin the purchase_data data frame by age* Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below* Create a summary data frame to hold the results* Optional: give the displayed data cleaner formatting* Display the summary data frameIn [ ]:# Bin the renamed_df data frame by agerenamed_df["AgeGroup"] = pd.cut(renamed_df["Age"], bins, labels=group_names, include_lowest=True)renamed_df.head()In [ ]:# Age Purchase countage_purch_cnt = renamed_df.groupby("AgeGroup").size()age_purch_cntIn [ ]:# Average Purchase Priceage_price_cnt = round((renamed_df.groupby("AgeGroup").Price.mean()),2)age_price_cntIn [ ]:# Purchase total by Age Groupage_price_sum = renamed_df.groupby("AgeGroup").Price.sum()age_price_sumIn [ ]:# Average purchase price per personeavg_purchase_person = round((age_price_sum / player_summ2["Count"]),2)avg_purchase_personIn [ ]:# summary data frameage_purch_summ = pd.DataFrame([age_purch_cnt, age_price_cnt, age_price_sum]).Tage_purch_summ.columns = ["Total Purchases", "Average Purchases", "Sum Purchases"]age_purch_summ['Purchases by Player Avg'] = avg_purchase_personage_purch_summTop Spenders* Run basic calculations to obtain the results in the table below* Create a summary data frame to hold the results* Sort the total purchase value column in descending order* Optional: give the displayed data cleaner formatting* Display a preview of the summary data frameIn [ ]:# Groupby sorted by SNtop_spender = renamed_df.groupby('SN')In [ ]:# Purchase counts by personpurchase_counts = top_spender['SN'].count()purchase_countsIn [ ]:# Average purchase by personavg_purchase = round((top_spender['Price'].mean()),2)avg_purchaseIn [ ]:# total purchase per persontotal_purchase = top_spender['Price'].sum()total_purchaseIn [ ]:# Summary data frametop_spender_summ = pd.DataFrame([purchase_counts, avg_purchase, total_purchase]).Ttop_spender_summ.columns = ["Total Purchases", "Average Purchases", "Sum Purchases"]top_spender_summ.sort_values(by='Sum Purchases', ascending=False).head(5)Most Popular Items* Retrieve the Item ID, Item Name, and Item Price columns* Group by Item ID and Item Name. Perform calculations to obtain purchase count, average item price, and total purchase value* Create a summary data frame to hold the results* Sort the purchase count column in descending order* Optional: give the displayed data cleaner formatting* Display a preview of the summary data frameIn [ ]:# Groupby for Item ID and Item Namepopular_item = renamed_df.groupby(['Item_ID', 'Item_Name'])In [ ]:# Total items purchased by Item IDitem_count = popular_item['Item_ID'].count()item_countIn [ ]:# Item price amountitem_price = round((popular_item['Price'].mean()),2)item_priceIn [ ]:# Total revenue by itemsum_price = popular_item['Price'].sum()sum_priceIn [ ]:# summary data framepopular_items_summ = pd.DataFrame([item_count, item_price, sum_price]).Tpopular_items_summ.columns = ["Purchase Count", "Item Price", "Total Purchase Value"]popular_items_summ.sort_values(by='Purchase Count', ascending=False).head(5)Most Profitable Items* Sort the above table by total purchase value in descending order* Optional: give the displayed data cleaner formatting* Display a preview of the data frameIn [ ]:# summary data table, sorting by Total Purchase Valuepopular_items_summ = pd.DataFrame([item_count, item_price, sum_price]).Tpopular_items_summ.columns = ["Purchase Count", "Item Price", "Total Purchase Value"]popular_items_summ.sort_values(by='Total Purchase Value', ascending=False).head(5)