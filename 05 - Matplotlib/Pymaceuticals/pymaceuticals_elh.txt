Observations and InsightsTypeÊMarkdownÊand LaTeX:Ê??2?2InÊ[Ê]:# Dependencies and Setupimport matplotlib.pyplot as pltimport pandas as pdimport scipy.stats as stimport seaborn as snimport numpy as np?# linear modellingimport statsmodels.api as smfrom scipy.stats import linregressfrom sklearn.linear_model import LinearRegression, Ridge, Lassofrom sklearn.ensemble import RandomForestRegressor?# metricsfrom sklearn.metrics import mean_squared_errorfrom sklearn.metrics import r2_score?# Study data filesmouse_metadata_path = "data/Mouse_metadata.csv"study_results_path = "data/Study_results.csv"?# Read the mouse data and the study resultsmouse_metadata = pd.read_csv(mouse_metadata_path)study_results = pd.read_csv(study_results_path)?# Combine the data into a single dataset?# Display the data table for preview?InÊ[Ê]:mouse_metadata.info()InÊ[Ê]:study_results.info()InÊ[Ê]:merge_df = pd.merge(study_results, mouse_metadata, on="Mouse ID")merge_df.head()InÊ[Ê]:merge_df.info()InÊ[Ê]:# Checking the number of mice.unique_mice = merge_df['Mouse ID'].nunique()unique_miceInÊ[Ê]:# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint. ?duplicate_mouse = merge_df[merge_df[['Mouse ID', 'Timepoint']].duplicated() == True]duplicate_mouseInÊ[Ê]:# Index for all entries with Mouse ID of g989?ind_drop = merge_df[merge_df['Mouse ID'].apply(lambda x: x.startswith('g989'))].indexind_dropInÊ[Ê]:# Drop all Indexes for Mouse ID of g989clean_df = merge_df.drop(ind_drop)clean_df.info()InÊ[Ê]:# Checking the number of mice in the clean DataFrame.?unique_mice = clean_df['Mouse ID'].nunique()unique_miceInÊ[Ê]:# Create a clean DataFrame by dropping the duplicate mouse by its ID.clean_df.head()Summary StatisticsInÊ[Ê]:# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen?# Use groupby and summary statistical methods to calculate the following properties of each drug regimen: # mean, median, variance, standard deviation, and SEM of the tumor volume. # Assemble the resulting series into a single summary dataframe.??InÊ[Ê]:renamed_df = clean_df.rename(columns={"Tumor Volume (mm3)":"Tumor_Volume_mm3", 'Drug Regimen':'Drug_Regimen', 'Mouse ID':'Mouse_ID', 'Metastatic Sites':'Metastatic_Sites', 'Weight (g)':'Weight_g'})renamed_df.head()InÊ[Ê]:tumor_regimen = clean_df.groupby("Drug Regimen").size()tumor_regimenInÊ[Ê]:tumor_mean = round((renamed_df.groupby("Drug_Regimen").Tumor_Volume_mm3.mean()),2)tumor_meanInÊ[Ê]:tumor_median = round((renamed_df.groupby("Drug_Regimen").Tumor_Volume_mm3.median()),2)tumor_medianInÊ[Ê]:tumor_var = round((renamed_df.groupby("Drug_Regimen").Tumor_Volume_mm3.var()),2)tumor_varInÊ[Ê]:tumor_std = round((renamed_df.groupby("Drug_Regimen").Tumor_Volume_mm3.std()),2)tumor_stdInÊ[Ê]:tumor_sem = round((renamed_df.groupby("Drug_Regimen").Tumor_Volume_mm3.sem()),2)tumor_semInÊ[Ê]:# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen?# Using the aggregation method, produce the same summary statistics in a single line?Tumor_analysis_summ = pd.DataFrame([tumor_mean, tumor_median, tumor_var, tumor_std, tumor_sem]).TTumor_analysis_summ.columns = ["Average Tumor Size", "Median Tumor Size", "Tumor Variance", "Tumor Standard Deviation", "Tumor SEM"]Tumor_analysis_summ?Bar and Pie ChartsInÊ[Ê]:count_drugs = renamed_df.groupby('Drug_Regimen')['Mouse_ID'].nunique().reset_index()?count_drugsInÊ[Ê]:# Generate a bar plot showing the total number of unique mice tested on each drug regimen using pandas.?# Pandas can also plot multiple columns if the DataFrame includes themmulti_plot = count_drugs.plot(kind="bar", figsize=(12, 5), legend=False, title='Number of Mice per Drug Regimen', fontsize=12, color="peachpuff",xlabel="Drug Regimen", ylabel='Number of Mice')?# PandasPlot.set_xticklabels() can be used to set the tick labels as wellmulti_plot.set_xticklabels(count_drugs["Drug_Regimen"], rotation=0)InÊ[Ê]:# Generate a bar plot showing the total number of unique mice tested on each drug regimen using pyplot.?plt.figure(figsize=(12,5))plt.bar(count_drugs['Drug_Regimen'],count_drugs.Mouse_ID, color= "cadetblue", width=.65)?# Give teh chart a title, x label, and y labelplt.title('Number of Mice per Drug Regimen', fontsize=16, color='darkcyan')plt.xlabel('Drug Regimen', fontsize=12)plt.ylabel('Number of Mice', fontsize=12)?plt.show()InÊ[Ê]:# Generate a pie plot showing the distribution of female versus male mice using pandas??InÊ[Ê]:mouse_sex = clean_df.groupby("Sex").size()mouse_sexInÊ[Ê]:?multi_plot = mouse_sex.plot(kind="pie", colors=['lightcoral', 'powderblue'],figsize=(8, 6), legend=False, title='Gender Distribution', fontsize=14, autopct="%1.1f%%", startangle=40)plt.axis("equal")?Quartiles, Outliers and BoxplotsInÊ[Ê]:# Calculate the final tumor volume of each mouse across four of the treatment regimens:  # Capomulin, Ramicane, Infubinol, and Ceftamin?# Start by getting the last (greatest) timepoint for each mouse??# Merge this group df with the original dataframe to get the tumor volume at the last timepoint?InÊ[Ê]:# Start by getting the last (greatest) timepoint for each mouse?timepoint_max = renamed_df.groupby(["Mouse_ID", "Drug_Regimen"]).Timepoint.max().reset_index()timepoint_max?InÊ[Ê]:# Merge this group df with the original dataframe to get the tumor volume at the last timepoint?timpoint_merge = pd.merge(timepoint_max, renamed_df, on=["Mouse_ID", 'Timepoint', "Drug_Regimen"])timpoint_merge.head()?InÊ[Ê]:# Put treatments into a list for for loop (and later for plot labels)???# Create empty list to fill with tumor vol data (for plotting)??# Calculate the IQR and quantitatively determine if there are any potential outliers. ?        # Locate the rows which contain mice on each drug and get the tumor volumes            # add subset             # Determine outliers using upper and lower bounds    InÊ[Ê]:# Put treatments into a list for for loop (and later for plot labels)?treatments = ['Capomulin', 'Ramicane', 'Infubinol', 'Ceftamin']?# Create empty list to fill with tumor vol data (for plotting)?tumor_vol = []?# Calculate the IQR and quantitatively determine if there are any potential outliers. for treatment in treatments:        # Locate the rows which contain mice on each drug and get the tumor volumes    drug_vol = timpoint_merge.loc[timpoint_merge['Drug_Regimen'] == treatment]        # add subset     final_vol = drug_vol.loc[drug_vol['Timepoint'] == drug_vol['Timepoint']]        #create a series that lists all final tumor values    values = final_vol['Tumor_Volume_mm3']    tumor_vol.append(values)    ?    # Determine outliers using upper and lower bounds        quartiles = values.quantile([.25, .5, .75])    lower = quartiles[.25]    upper= quartiles[.75]    iqr = upper - lower        #upper and lower bounds    lower_bound = lower - (1.5*iqr)    upper_bound = upper + (1.5*iqr)       #Check for ouliers    outliers_count = (values.loc[(final_vol['Tumor_Volume_mm3'] >= upper_bound) |                                (final_vol['Tumor_Volume_mm3'] <= lower_bound)]).count()        print(f'{treatment} Lower Bound: {lower_bound}')    print(f'{treatment} Upper Bound: {upper_bound}')    print(f'{treatment} number of outlier: {outliers_count}')    ?InÊ[Ê]:# Generate a box plot of the final tumor volume of each mouse across four regimens of interest?plt.figure(figsize= (10,6))plt.boxplot(tumor_vol, positions=[1,2,3,4], notch=True, patch_artist=True,            boxprops=dict(facecolor='thistle', color='darkmagenta'),            capprops=dict(color='blueviolet'),            whiskerprops=dict(color='darkviolet'),            flierprops=dict(color='crimson', markeredgecolor='crimson'),            medianprops=dict(color='darkcyan'),            )?plt.title('Final Tumor Volume')plt.ylabel('Final Tumor Volume (mm3)')plt.xticks([1, 2, 3, 4], ['Capomulin', 'Ramicane', 'Infubinol', 'Ceftamin'])?plt.show()Line and Scatter PlotsInÊ[Ê]:# Generate a line plot of tumor volume vs. time point for a mouse treated with Capomulintumer_line = renamed_df.loc[renamed_df["Mouse_ID"] == "c458",:]tumer_line.head()?InÊ[Ê]:x_axis = tumer_line["Timepoint"]y_axis = tumer_line["Tumor_Volume_mm3"]?fig1, ax1 = plt.subplots(figsize=(18, 10))plt.title('Ramicane treatmeant of mouse c458',fontsize =40, color="darkslategrey")plt.plot(x_axis, y_axis,linewidth=5, markersize=20,marker="X",color="darkslategray")plt.xlabel('Timepoint (Days)',fontsize =22)plt.ylabel('Tumor Volume (mm3)',fontsize =22)plt.show()?InÊ[Ê]:# Generate a scatter plot of average tumor volume vs. mouse weight for the Capomulin regimen?InÊ[Ê]:capomulin_df = renamed_df.loc[renamed_df['Drug_Regimen'] == 'Capomulin']capomulin_dfInÊ[Ê]:#Find Average Tumor volume for each mouseavg_Capomulin_weight = pd.DataFrame(capomulin_df.groupby('Mouse_ID')['Weight_g'].mean()).reset_index()avg_Capomulin_weight.head()?InÊ[Ê]:avg_Capomulin_tumor = pd.DataFrame(capomulin_df.groupby('Mouse_ID')['Tumor_Volume_mm3'].mean()).reset_index()avg_Capomulin_tumor.head()InÊ[Ê]:Capomulin_merge = pd.merge(avg_Capomulin_tumor, avg_Capomulin_weight, on=["Mouse_ID"])Capomulin_merge.head()?InÊ[Ê]:x_data = Capomulin_merge["Weight_g"]y_data = Capomulin_merge['Tumor_Volume_mm3']?fig1, ax1 = plt.subplots(figsize=(10, 8))plt.scatter(x_data, y_data, color='darkviolet')plt.xlabel("Weight (g)", fontsize =14, color="rebeccapurple")plt.ylabel("Average Tumor Volume (mm3)", fontsize =14, color="rebeccapurple")plt.title('Average Tumor Volume by Weight', fontsize =14, color="midnightblue")plt.show()Correlation and RegressionInÊ[Ê]:# Calculate the correlation coefficient and linear regression model # for mouse weight and average tumor volume for the Capomulin regimen?InÊ[Ê]:# Dataframe for Capomulincapomulin_df = renamed_df.loc[renamed_df['Drug_Regimen'] == 'Capomulin']capomulin_dfInÊ[Ê]:capomulin_df.describe()InÊ[Ê]:vol_df = pd.DataFrame(capomulin_df.groupby('Mouse_ID')['Tumor_Volume_mm3'].mean()).reset_index().rename(columns={'Tumor_Volume_mm3': 'Avg_Tumor_Volume'})vol_dfInÊ[Ê]:avg_vol_df = pd.merge(capomulin_df, vol_df, on='Mouse_ID')avg_vol_df = avg_vol_df[['Weight_g', 'Avg_Tumor_Volume']].drop_duplicates()avg_vol_dfInÊ[Ê]:x_data = avg_vol_df['Weight_g']y_data = avg_vol_df['Avg_Tumor_Volume']InÊ[Ê]:regression_df = pd.merge(vol_df, avg_vol_df)regression_df.head()InÊ[Ê]:corrs = regression_df.corr()corrsInÊ[Ê]:plt.figure(figsize=(10,6))sn.heatmap(corrs)plt.show()InÊ[Ê]:plt.figure(figsize=(12,6))?plt.scatter(regression_df.Weight_g, regression_df.Avg_Tumor_Volume)plt.ylabel("Tumor Volume (mm3)", fontsize=12)plt.xlabel("Mouse Weight (g)", fontsize=12)plt.title("Tumor Volume vs Mouse Weight", weight='bold', fontsize=16)?plt.show()InÊ[Ê]:feature = renamed_df[["Weight_g"]]target = renamed_df["Tumor_Volume_mm3"]InÊ[Ê]: # STATSMODELSX = sm.add_constant(feature)Y = target?model = sm.OLS(Y,X)results = model.fit()results.summary()InÊ[Ê]:results.mse_resid InÊ[Ê]: # make plot?slope, intercept, r_value, p_value, std_err = linregress(x_data, y_data)regress_values = x_data * slope + interceptline_eq = "y = " + str(round(slope,2)) + "x + " + str(round(intercept,2))# print(line_eq)plt.scatter(x_data, y_data)?plt.plot(x_data, regress_values, "r-")?plt.annotate(line_eq,(20,35), fontsize=14,color="indigo")?plt.ylabel("Tumor Volume (mm3)", fontsize=12)plt.xlabel("Mouse Weight (g)", fontsize=12)plt.title("Tumor Volume vs Mouse Weight", weight='bold', fontsize=16)?print(f"The r-squared is: {results.rsquared}")plt.show()InÊ[Ê]:results.fittedvaluesInÊ[Ê]:np.mean((renamed_df.Weight_g - results.fittedvalues) ** 2)