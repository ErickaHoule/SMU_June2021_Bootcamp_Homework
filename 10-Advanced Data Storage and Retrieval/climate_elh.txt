#!/usr/bin/env python# coding: utf-8# In[1]:get_ipython().run_line_magic('matplotlib', 'inline')from matplotlib import stylestyle.use('fivethirtyeight')import matplotlib.pyplot as plt# In[2]:# SQL ALCHEMYfrom sqlalchemy import create_engine, inspectfrom sqlalchemy import Column, Integer, String, Float# In[3]:import numpy as npimport pandas as pd# In[4]:import datetime as dt# # Reflect Tables into SQLAlchemy ORM# In[5]:# Python SQL toolkit and Object Relational Mapperimport sqlalchemyfrom sqlalchemy.ext.automap import automap_basefrom sqlalchemy.orm import Sessionfrom sqlalchemy import create_engine, func# In[6]:engine = create_engine("sqlite:///Resources/hawaii.sqlite")# In[7]:inspector = inspect(engine)tables = inspector.get_table_names()tables# In[8]:columns = inspector.get_columns('measurement')for column in columns:    print(column["name"], column["type"])# In[9]:columns = inspector.get_columns('station')for column in columns:    print(column["name"], column["type"])# In[10]:# Reflect Database into ORM classBase = automap_base()Base.prepare(engine, reflect=True)Measurement = Base.classes.measurement# In[11]:# Reflect Database into ORM classBase = automap_base()Base.prepare(engine, reflect=True)Station = Base.classes.station# In[12]:# Create our session (link) from Python to the DBsession = Session(engine)# # Exploratory Climate Analysis# In[13]:# Latest Datesession.query(Measurement.date).order_by(Measurement.date.desc()).first()# In[14]:precip_data = (session.query(Measurement.date, Measurement.prcp)                  .filter(Measurement.date >= '2016-08-23')                  .order_by(Measurement.date)                  .all())precip_data# In[15]:#convert query object to data frame and set indexprecip_table = pd.DataFrame(precip_data)precip_table = rainTable.set_index('date')# In[16]:#sort by dateprecip_table = precip_table.sort_index(ascending=True)# In[17]:#plot with pandasprecip_table.plot(title="Precipitation: 8/23/16 - 8/23/17", color='dodgerblue', figsize=(18,8))plt.xlabel("Date")plt.ylabel("Inches")plt.xticks(rotation = 90)L=plt.legend(loc=1)L.get_texts()[0].set_text('Precipitation')# In[18]:# Use Pandas to calcualte the summary statistics for the precipitation dataprecip_table.describe()# In[30]:# Design a query to show how many stations are available in this dataset?station_count = session.query(Station).count()station_count# In[31]:# What are the most active stations? (i.e. what stations have the most rows)?# List the stations and the counts in descending order.station_count = (session.query(Measurement.station, func.count(Measurement.station)).group_by(Measurement.station).order_by(func.count(Measurement.station).desc()))station_count.all()# In[33]:# Using the station id from the previous query, calculate the lowest temperature recorded, min_temp = session.query(func.min(Measurement.tobs)).filter(Measurement.station == "USC00519281").all()min_temp# In[34]:# highest temperature recordedmax_temp = session.query(func.max(Measurement.tobs)).filter(Measurement.station == "USC00519281").all()max_temp# In[35]:# average temperature of the most active stationavg_temp = session.query(func.avg(Measurement.tobs)).filter(Measurement.station == "USC00519281").all()avg_temp# In[36]:year_tobs=(session.query(Measurement.date,(Measurement.tobs))                  .filter(func.strftime(Measurement.date) >= '2016-08-23')                  .filter(Measurement.station=='USC00519281')                  .all())year_tobs# In[ ]:#last 12 months of temperature observation data (TOBS)temp_data = (session.query(Measurement.date, Measurement.tobs).filter(Measurement.date >= '2016-08-23').filter(Measurement.station == "USC00519281")            .order_by(Measurement.date))                  temp_data.all()# In[37]:tobs_df=pd.DataFrame(temp_data)tobs_df.set_index('date',inplace=True)plt.figure(figsize=(12,8))plt.hist(tobs_df['tobs'],bins=12,color='royalblue')plt.xlabel("Temperature")plt.ylabel("Frequency")plt.legend("Tobs",loc="best")# ## Bonus Challenge Assignment# In[ ]:# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' # and return the minimum, average, and maximum temperatures for that range of datesdef calc_temps(start_date, end_date):    """TMIN, TAVG, and TMAX for a list of dates.        Args:        start_date (string): A date string in the format %Y-%m-%d        end_date (string): A date string in the format %Y-%m-%d            Returns:        TMIN, TAVE, and TMAX    """        return session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).        filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).all()# function usage exampleprint(calc_temps('2012-02-28', '2012-03-05'))# In[ ]:# Use your previous function `calc_temps` to calculate the tmin, tavg, and tmax # for your trip using the previous year's data for those same dates.# In[ ]:# Plot the results from your previous query as a bar chart. # Use "Trip Avg Temp" as your Title# Use the average temperature for the y value# Use the peak-to-peak (tmax-tmin) value as the y error bar (yerr)# In[ ]:# Calculate the total amount of rainfall per weather station for your trip dates using the previous year's matching dates.# Sort this in descending order by precipitation amount and list the station, name, latitude, longitude, and elevation# In[ ]:# Create a query that will calculate the daily normals # (i.e. the averages for tmin, tmax, and tavg for all historic data matching a specific month and day)def daily_normals(date):    """Daily Normals.        Args:        date (str): A date string in the format '%m-%d'            Returns:        A list of tuples containing the daily normals, tmin, tavg, and tmax        """        sel = [func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]    return session.query(*sel).filter(func.strftime("%m-%d", Measurement.date) == date).all()    daily_normals("01-01")# In[ ]:# calculate the daily normals for your trip# push each tuple of calculations into a list called `normals`# Set the start and end date of the trip# Use the start and end date to create a range of dates# Stip off the year and save a list of %m-%d strings# Loop through the list of %m-%d strings and calculate the normals for each date# In[ ]:# Load the previous query results into a Pandas DataFrame and add the `trip_dates` range as the `date` index# In[ ]:# Plot the daily normals as an area plot with `stacked=False`